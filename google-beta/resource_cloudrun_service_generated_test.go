// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform/helper/acctest"
	"github.com/hashicorp/terraform/helper/resource"
	"github.com/hashicorp/terraform/terraform"
)

func TestAccCloudrunService_cloudrunServiceBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"namespace":     getTestProjectFromEnv(),
		"random_suffix": acctest.RandString(10),
	}

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProvidersOiCS,
		CheckDestroy: testAccCheckCloudrunServiceDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccCloudrunService_cloudrunServiceBasicExample(context),
			},
		},
	})
}

func testAccCloudrunService_cloudrunServiceBasicExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloudrun_service" "default" {
  name          = "tftest-cloudrun-%{random_suffix}"
  location = "us-central1"
  provider = "google-beta"

  metadata {
    namespace = "%{namespace}"
  }

  spec {
    container {
      image = "gcr.io/cloudrun/hello"
    }
  }
}
`, context)
}

func testAccCheckCloudrunServiceDestroy(s *terraform.State) error {
	for name, rs := range s.RootModule().Resources {
		if rs.Type != "google_cloudrun_service" {
			continue
		}
		if strings.HasPrefix(name, "data.") {
			continue
		}

		config := testAccProvider.Meta().(*Config)

		url, err := replaceVarsForTest(rs, "https://run.googleapis.com/v1alpha1/projects/{{project}}/locations/{{location}}/services/{{name}}")
		if err != nil {
			return err
		}

		_, err = sendRequest(config, "GET", url, nil)
		if err == nil {
			return fmt.Errorf("CloudrunService still exists at %s", url)
		}
	}

	return nil
}
