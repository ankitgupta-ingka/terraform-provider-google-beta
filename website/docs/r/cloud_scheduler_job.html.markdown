---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
layout: "google"
page_title: "Google: google_cloud_scheduler_job"
sidebar_current: "docs-google-cloud-scheduler-job"
description: |-
  A scheduled job that can publish a pubsub message or a http request
  every X interval of time, using crontab format string
---

# google\_cloud\_scheduler\_job

A scheduled job that can publish a pubsub message or a http request
every X interval of time, using crontab format string

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/provider_versions.html) for more details on beta resources.

To get more information about Job, see:

* [API documentation](https://cloud.google.com/scheduler/docs/reference/rest/)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/scheduler/)

## Argument Reference

The following arguments are supported:


* `name` -
  (Required)
  The name of the job.


- - -


* `description` -
  (Optional)
  A human-readable description for the job. 
  This string must not contain more than 500 characters.

* `schedule` -
  (Optional)
  Describes the schedule on which the job will be executed.

* `time_zone` -
  (Optional)
  Specifies the time zone to be used in interpreting schedule.
  The value of this field must be a time zone name from the tz database.

* `region` -
  (Optional)
  Region where the schedule job resides.

* `retry_config` -
  (Optional)
  By default, if a job does not complete successfully, 
  meaning that an acknowledgement is not received from the handler, 
  then it will be retried with exponential backoff according to the settings  Structure is documented below.

* `pubsub_target` -
  (Optional)
  Pub/Sub target
  If the job providers a Pub/Sub target the cron will publish
  a message to the provided topic  Structure is documented below.

* `app_engine_http_target` -
  (Optional)
  App Engine HTTP target.
  If the job providers a App Engine HTTP target the cron will 
  send a request to the service instance  Structure is documented below.

* `http_target` -
  (Optional)
  HTTP target.
  If the job providers a http_target the cron will 
  send a request to the targeted url  Structure is documented below.
* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


The `retry_config` block supports:

* `retry_count` -
  (Optional)
  The number of attempts that the system will make to run a 
  job using the exponential backoff procedure described by maxDoublings.
  Values greater than 5 and negative values are not allowed.

* `max_retry_duration` -
  (Optional)
  The time limit for retrying a failed job, measured from time when an execution was first attempted. 
  If specified with retryCount, the job will be retried until both limits are reached.
  A duration in seconds with up to nine fractional digits, terminated by 's'.

* `min_backoff_duration` -
  (Optional)
  The minimum amount of time to wait before retrying a job after it fails.
  A duration in seconds with up to nine fractional digits, terminated by 's'.

* `max_backoff_duration` -
  (Optional)
  The maximum amount of time to wait before retrying a job after it fails.
  A duration in seconds with up to nine fractional digits, terminated by 's'.

* `max_doublings` -
  (Optional)
  The time between retries will double maxDoublings times.
  A job's retry interval starts at minBackoffDuration, 
  then doubles maxDoublings times, then increases linearly, 
  and finally retries retries at intervals of maxBackoffDuration up to retryCount times.

The `pubsub_target` block supports:

* `topic_name` -
  (Required)
  The name of the Cloud Pub/Sub topic to which messages will be published when a job is delivered. 
  The topic name must be in the same format as required by PubSub's PublishRequest.name, 
  for example projects/PROJECT_ID/topics/TOPIC_ID.

* `data` -
  (Optional)
  The message payload for PubsubMessage.
  Pubsub message must contain either non-empty data, or at least one attribute.

* `attributes` -
  (Optional)
  Attributes for PubsubMessage.
  Pubsub message must contain either non-empty data, or at least one attribute.

The `app_engine_http_target` block supports:

* `http_method` -
  (Optional)
  Which HTTP method to use for the request.

* `app_engine_routing` -
  (Optional)
  App Engine Routing setting for the job.  Structure is documented below.

* `relative_uri` -
  (Required)
  The relative URI.
  The relative URL must begin with "/" and must be a valid HTTP relative URL. 
  It can contain a path, query string arguments, and \# fragments. 
  If the relative URL is empty, then the root path "/" will be used. 
  No spaces are allowed, and the maximum length allowed is 2083 characters

* `body` -
  (Optional)
  HTTP request body. 
  A request body is allowed only if the HTTP method is POST or PUT. 
  It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.

* `headers` -
  (Optional)
  HTTP request headers.
  This map contains the header field names and values. 
  Headers can be set when the job is created.


The `app_engine_routing` block supports:

* `service` -
  (Optional)
  App service.
  By default, the job is sent to the service which is the default service when the job is attempted.

* `version` -
  (Optional)
  App version.
  By default, the job is sent to the version which is the default version when the job is attempted.

* `instance` -
  (Optional)
  App instance.
  By default, the job is sent to an instance which is available when the job is attempted.

The `http_target` block supports:

* `uri` -
  (Required)
  The full URI path that the request will be sent to.

* `http_method` -
  (Optional)
  Which HTTP method to use for the request.

* `body` -
  (Optional)
  HTTP request body. 
  A request body is allowed only if the HTTP method is POST, PUT, or PATCH. 
  It is an error to set body on a job with an incompatible HttpMethod.

* `headers` -
  (Optional)
  This map contains the header field names and values. 
  Repeated headers are not supported, but a header value can contain commas.


## Timeouts

This resource provides the following
[Timeouts](/docs/configuration/resources.html#timeouts) configuration options:

- `create` - Default is 4 minutes.
- `delete` - Default is 4 minutes.

## Import

Job can be imported using any of these accepted formats:

```
$ terraform import -provider=google-beta google_cloud_scheduler_job.default projects/{{project}}/locations/{{region}}/jobs/{{name}}
$ terraform import -provider=google-beta google_cloud_scheduler_job.default {{project}}/{{region}}/{{name}}
$ terraform import -provider=google-beta google_cloud_scheduler_job.default {{name}}
```

-> If you're importing a resource with beta features, make sure to include `-provider=google-beta`
as an argument so that Terraform uses the correct provider to import your resource.
